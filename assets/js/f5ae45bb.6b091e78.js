"use strict";(self.webpackChunkkubedl_website=self.webpackChunkkubedl_website||[]).push([[34],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(k,a(a({ref:n},p),{},{components:t})):r.createElement(k,a({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},319:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],l={sidebar_position:5},s="Run in Host Network",c={unversionedId:"training/hostnetowrk",id:"training/hostnetowrk",title:"Run in Host Network",description:"Background",source:"@site/docs/training/hostnetowrk.md",sourceDirName:"training",slug:"/training/hostnetowrk",permalink:"/docs/training/hostnetowrk",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/training/hostnetowrk.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Dashboard",permalink:"/docs/training/dashboard"},next:{title:"Cron Scheduling",permalink:"/docs/training/cron"}},p=[{value:"Background",id:"background",children:[],level:2},{value:"How To Use",id:"how-to-use",children:[],level:2},{value:"Design",id:"design",children:[],level:2}],u={toc:p};function d(e){var n=e.components,l=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"run-in-host-network"},"Run in Host Network"),(0,i.kt)("h2",{id:"background"},"Background"),(0,i.kt)("p",null,"Network bandwidth is a bottleneck resource for communication-intensive jobs. Host mode networking can be useful to optimize\nperformance. In addition, other scenarios (e.g: nvlink communications between containerized gpu processes) may depend on\nhost network as well."),(0,i.kt)("h2",{id:"how-to-use"},"How To Use"),(0,i.kt)("p",null,"KubeDL provides a feature-gate to enable ",(0,i.kt)("inlineCode",{parentName:"p"},"hostnetwork")," mode for jobs. Users only need to add an annotation\n",(0,i.kt)("inlineCode",{parentName:"p"},"kubedl.io/network-mode: host")," to the job specifications, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'    apiVersion: "training.kubedl.io/v1alpha1"\n    kind: "TFJob"\n    metadata:\n      name: "mnist"\n      namespace: kubedl\n      annotations:\n +      kubedl.io/network-mode: \'host\'\n    spec:\n      cleanPodPolicy: None\n      tfReplicaSpecs:\n        Worker:\n          replicas: 3\n          ...\n')),(0,i.kt)("h2",{id:"design"},"Design"),(0,i.kt)("p",null,"The essence of ",(0,i.kt)("inlineCode",{parentName:"p"},"hostnetwork-mode")," is to randomize container ports to avoid port collision and enable service discovery\nacross workers. KubeDL achieves by following steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Enable ",(0,i.kt)("inlineCode",{parentName:"li"},"hostnetwork")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"Pod")," spec and set DNS policy as ",(0,i.kt)("inlineCode",{parentName:"li"},"ClusterFirstWithHostNet"),";"),(0,i.kt)("li",{parentName:"ol"},"Choose a random port as container port."),(0,i.kt)("li",{parentName:"ol"},"Change ",(0,i.kt)("inlineCode",{parentName:"li"},"TargetPort")," of corresponding worker's ",(0,i.kt)("inlineCode",{parentName:"li"},"Service")," to the previous randomized port, and set ",(0,i.kt)("inlineCode",{parentName:"li"},"CluterIP")," as empty string(instead of ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),"), so that kube-proxy will be able to forward traffic from ",(0,i.kt)("inlineCode",{parentName:"li"},"Port")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"TargetPort"),"."),(0,i.kt)("li",{parentName:"ol"},"Change the job cluster spec (e.g. the ",(0,i.kt)("inlineCode",{parentName:"li"},"TF_CONFIG"),") ."),(0,i.kt)("li",{parentName:"ol"},"Handle worker fail-over and use latest available port as the ",(0,i.kt)("inlineCode",{parentName:"li"},"TargetPort")," in the new worker.")),(0,i.kt)("p",null,"Here is a Tensorflow job example:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"hostnetwork",src:t(6549).Z,width:"912",height:"472"})))}d.isMDXComponent=!0},6549:function(e,n,t){n.Z=t.p+"assets/images/tf_hostnetwork-b76f5f4f1ec1d02b0ebc2d8fbbfca3f2.png"}}]);